#!/usr/bin/env python
"""
This solution uses Lazy Cache which is located outside of the collatz_eval function
"""
lazyCache = {}
# ---------------------------
# projects/collatz/Collatz.py
# Copyright (C) 2013
# Glenn P. Downing
# ---------------------------

# ------------
# collatz_read
# ------------

def collatz_read (r, a) :
    """
	reads two ints into a[0] and a[1]
	r is a reader
	a is an array of int
	return true if that succeeds, false otherwise
	"""
    s = r.readline()
    if s == "" :
        return False
    l = s.split()
    a[0] = int(l[0])
    a[1] = int(l[1])
    assert a[0] > 0
    assert a[1] > 0
    return True

# ------------
# collatz_eval
# ------------

def collatz_eval (i, j) :
	"""
	i is the beginning of the range, inclusive
	j is the end of the range, inclusive
	return the max cycle length in the range [i, j]
	"""
	assert i > 0
	assert j > 0
	maxLength = 1
	"""
	if i > j, swap i and j
	"""
	if i > j :
		temp = i
		i = j
		j = temp
	"""
	if i is less than a half of j, the we don't have to check the part of the
	range that is less than j/2 becuase cycle lengths in this range are going to 
	be smaller than cycle lengths in the range from j/2 to j
	"""
	if i < j / 2 :
		i = j / 2
	"""
    LAZY CACHE implementation
	- check if 
	"""
	for k in range(i, j+1):
		count = 1
		while k > 1 :
				if k in lazyCache :
					count = (lazyCache[k]) + count - 1
					k = 1
				else :
					if (k % 2) == 0 :
						k = (k / 2)
						count += 1
					else :
						k = (1.5 * k) + 0.5
						count += 2
        if (maxLength < count) :
            maxLength = count
        lazyCache[i] = count
        i+=1

	assert maxLength > 0
	return maxLength

# -------------
# collatz_print
# -------------

def collatz_print (w, i, j, v) :
    """
prints the values of i, j, and v
w is a writer
i is the beginning of the range, inclusive
j is the end of the range, inclusive
v is the max cycle length
"""
    w.write(str(i) + " " + str(j) + " " + str(v) + "\n")  # what is str(i)???

# -------------
# collatz_solve
# -------------

def collatz_solve (r, w) :
    """
read, eval, print loop
r is a reader
w is a writer
"""
    a = [0, 0]
    while collatz_read(r, a) :
        v = collatz_eval(a[0], a[1])
        collatz_print(w, a[0], a[1], v)
